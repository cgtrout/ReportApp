<UserControl x:Class="ReportApp.View.VehicleEntryView"
	x:Name="ViewControl"
     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
     xmlns:util="clr-namespace:ReportApp.Utility"
     xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
	PreviewMouseWheel="UserControl_PreviewMouseWheel"
     MouseMove="ViewControl_MouseMove"
     PreviewMouseLeftButtonUp="TextBox_PreviewMouseLeftButtonUp"
     MouseLeftButtonUp="ViewControl_MouseLeftButtonUp"
     FocusManager.LostFocus="ViewControl_LostFocus"
     FocusManager.GotFocus="ViewControl_GotFocus"
     GiveFeedback="GiveFeedbackEventHandler"
     Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
    <Grid>
        <Grid.Resources>
            <DataTemplate x:Key="EditLinkTemplate">
                <TextBlock>
					<Hyperlink Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.EditCommand}" CommandParameter="{Binding Person.PersonId}">Edit</Hyperlink>
                </TextBlock>
            </DataTemplate>
            <LinearGradientBrush x:Key="OutTimeBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="#66000088" Offset="0" />
                <GradientStop Color="#BB000088" Offset="1" />
            </LinearGradientBrush>
            <Style x:Key="PassCellStyle" TargetType="{x:Type DataGridCell}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsPassEmpty}" Value="True">
                        <Setter Property="BorderBrush" Value="#6E0000" />
                        <Setter Property="BorderThickness" Value="1" />
                        <Setter Property="TextBlock.Foreground" Value="#FF0000" />
                        <Setter Property="Background" Value="{Binding PassSlotColor}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="PassCell" TargetType="TextBox">
                <Setter Property="TextBlock.Foreground" Value="Black"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="BorderBrush" Value="#FF058D05"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF85C985" Offset="1"/>
                            <GradientStop Color="#FF04A404" Offset="0.293"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="SelectionBrush" Value="#FF0D9325"/>
                <Setter Property="MinWidth" Value="39"/>
            </Style>
        </Grid.Resources>
        <Popup IsOpen="False" 
                 Name="popup" 
                 Placement="Relative"
                 PreviewMouseMove="popup_MouseMove"
                 >
            <TextBox Style="{StaticResource PassCell}">Test</TextBox>
        </Popup>
        <DockPanel>
            <DockPanel Background="#f0f3fb" DockPanel.Dock="Top">
                <DockPanel.Resources>
                    <BooleanToVisibilityConverter x:Key="BoolToVis"/>
                </DockPanel.Resources>
                
                <Button Command="{Binding RefreshCommand}"
                        BorderBrush="#BBBBBB"
                        Height="20"
                        Padding="0"
                        VerticalAlignment="Center"
                        VerticalContentAlignment="Center"
                        Background="Transparent"
                        Margin="0, 0, 0, 0" 
                        Width="50"
                        DockPanel.Dock="Right"
                        IsEnabled="{Binding AllButtonsEnabled}"
                        ToolTip="Use if any issues occur with vehicle entries system.">
                    Refresh
                </Button>
                <Button Margin="20,0,0,0" DockPanel.Dock="Right" Height="20" BorderBrush="#BBBBBB" 
                        Command="{Binding GenerateReportCommand}"
                        ToolTip="Open Printable report"
                        Background="Transparent">
                    <StackPanel  Orientation="Horizontal">
                        <TextBlock FontSize="10">Report</TextBlock>
                        <Image Margin="0,0,0,0" Width="15" Height="15" Source="c:\CTApp\Settings\Icons\Report.png"/>
                    </StackPanel>
                </Button>
                <Border 
                    CornerRadius="0"
                    VerticalAlignment="Center"
                    Height="20" 
                    Margin="0" 
                    Padding="0" 
                    DockPanel.Dock="Right" 
                    
                    BorderThickness="1, 0, 1, 0" 
                    BorderBrush="LightGray">
                    <WrapPanel VerticalAlignment="Center" Margin="0, 0, 0, 0" >
                        <Label  
                            Height="15" 
                            Margin="3, 0, 3, 0" 
                            Padding="0"
                            FontSize="11"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            >Filters:</Label>
                        <Button 
                            Command="{Binding FilterCommand}"
                            BorderBrush="#BBBBBB"
                            Background="{Binding AllButtonBackground}"
                            VerticalContentAlignment="Center"
                            VerticalAlignment="Center"
                            Margin="0, 0, 0, 0"
                            Padding="0"
                            Height="20"
                            CommandParameter="All"
                            Name="ButtonAll"
                            IsEnabled="{Binding AllButtonEnabled}"
                            Width="45"
                            ToolTip="Filter: Show all entries for the selected date."
                        >All</Button>
                        <Button 
                            Command="{Binding FilterCommand}"
                            BorderBrush="#BBBBBB"
                            Background="{Binding ActiveButtonBackground}"
                            Padding="0"
                            Height="20"
                            Margin="0, 0, 0, 0"
                            VerticalContentAlignment="Center"
                            VerticalAlignment="Center"
                            CommandParameter="Active"
                            Name="ButtonActive"
                            Width="45"
                            IsEnabled="{Binding ActiveButtonEnabled}"
                            ToolTip="Filter: Only show entries that are still active (have no out-time)."
                        >Active</Button>
                        <Button 
							Command="{Binding FilterCommand}"
							BorderBrush="#BBBBBB"
							Margin="0, 0, 3, 0"
							Padding="0"
                            Height="20"
							Background="{Binding EmptyButtonBackground}"
							VerticalContentAlignment="Center"
							VerticalAlignment="Center"
							Name="ButtonEmpty"
							CommandParameter="Empty"
							Width="45"
							IsEnabled="{Binding EmptyButtonEnabled}"
							ToolTip="Filter: Only show entries with an empty pass.">Empty
                        </Button>


                    </WrapPanel>
                </Border>


                <!--<ComboBox SelectedIndex="{Binding ShowType}" 
                              HorizontalAlignment="Right"
                              Width="100"
                              DockPanel.Dock="Right"
                              Style="{StaticResource {x:Static ToolBar.ComboBoxStyleKey}}">
                         <ComboBoxItem ToolTip="Show all vehicle entries">Show All</ComboBoxItem>
                         <ComboBoxItem ToolTip="Only show entries with no out time">Show Active</ComboBoxItem>
                         <ComboBoxItem ToolTip="Only show entries with no assigned pass">Show Empty</ComboBoxItem>
                    </ComboBox>-->
                <xctk:DateTimePicker Height="20" IsEnabled="{Binding IsDateEnabled}" TimePickerVisibility="Hidden" DockPanel.Dock="Left" Format="Custom" FormatString="yyyy-MMM-dd" Name="DateBox" Value="{Binding SelectedDate, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="ValueChanged">
                            <i:InvokeCommandAction Command="{Binding ChangeDateCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </xctk:DateTimePicker>

                <CheckBox Margin="5,1,0,0" VerticalAlignment="Center" FontSize="12" Height="17" DockPanel.Dock="Left" IsChecked="{Binding IsLockEnabled}"
                          ToolTip="Uncheck this to change date and sort.  Otherwise leave it locked.">
                    Lock
                </CheckBox>
                <TextBlock Margin="5,0,2,2" FontSize="15" VerticalAlignment="Center" DockPanel.Dock="Left" Foreground="Green" FontWeight="ExtraBold"  Visibility="{Binding IsActive, Converter={StaticResource BoolToVis}}" Text="Live"
                           ToolTip="'Live' means that vehicle entries are being processed normally for the current date"/>
                
            </DockPanel>
            <DockPanel Name="printGrid" LastChildFill="True">
                <DockPanel Visibility="Collapsed" Name="DockPanelSlider" LastChildFill="True" DockPanel.Dock="Bottom">
                    <TextBlock DockPanel.Dock="Left" >Zoom</TextBlock>
                    <Slider DockPanel.Dock="Right" Name="SliderZoom" Minimum="0.25" Maximum="2" SmallChange="0.25" LargeChange="0.5" Value="1.0"/>
                </DockPanel>
                <WrapPanel DockPanel.Dock="Bottom" Orientation="Horizontal" >
                    <WrapPanel.Resources>

                    </WrapPanel.Resources>

                    <!--Pass Panel Selector Queue-->
                    <ItemsControl ItemsSource="{Binding ElementName=ViewControl, Path=PassList, Mode=TwoWay}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <util:EditableTextBox DockPanel.Dock="Bottom" 
                                            
                                            Style="{StaticResource PassCell}"
                                            Text="{Binding PassNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            ToolTip="Double click and type pass numbers in here.  Click and drag them to Pass slot"
                                            PreviewMouseLeftButtonDown="TextBox_PreviewMouseLeftButtonDown"
                                            PreviewMouseLeftButtonUp="TextBox_PreviewMouseLeftButtonUp"
                                            PreviewMouseRightButtonDown="EditableTextBox_PreviewMouseRightButtonDown"
                                            MouseMove="TextBox_MouseMove"
                                            Margin="1,1"
                                            AllowDrop="False"
                                            TextChanged="TextBox_TextChanged">
                                    <util:EditableTextBox.ContextMenu>
                                        <ContextMenu Width="200" HorizontalAlignment="Left">
                                            <MenuItem HorizontalAlignment="Left" Header="Delete" Click="DeletePass_Click"/>
                                            <MenuItem HorizontalAlignment="Left" Header="Insert" Click="InsertPass_Click"/>
                                            <MenuItem HorizontalAlignment="Left" Header="Clear All" Click="ButtonClear_Click"/>
                                        </ContextMenu>
                                    </util:EditableTextBox.ContextMenu>
                                </util:EditableTextBox>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </WrapPanel>
                <DataGrid 
                         Name="MainDataGrid"
                         DockPanel.Dock="Top"
					ItemsSource="{Binding Path=View}"
					AutoGenerateColumns="False"
					SelectedValue="{Binding Path=SelectedValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    CanUserSortColumns="{Binding CanUserSort}"  
                    Sorting="MainDataGrid_Sorting"
					CanUserDeleteRows="False"
                         Margin="0, 0, 0, 5"
                         AllowDrop="True"
                         Drop="DataGrid_Drop"
                         SelectionMode="Single"
                         PreviewKeyDown="MainDataGrid_PreviewKeyDown"
                         LoadingRow="MainDataGrid_LoadingRow"
                        Initialized="MainDataGrid_Initialized"
                        Loaded="MainDataGrid_Loaded"
                        EnableColumnVirtualization="False"
                        EnableRowVirtualization="False"
					>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="CellEditEnding">
                            <i:InvokeCommandAction Command="{Binding CellEditCommand}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="RowEditEnding">
                            <i:InvokeCommandAction Command="{Binding RowEditCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <DataGrid.InputBindings>
                        <KeyBinding Key="Delete" Command="{Binding DeleteCommand}"/>
                        <MouseBinding Gesture="LeftDoubleClick" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.EditCommand}"/>
                    </DataGrid.InputBindings>
                    <DataGrid.Resources>
                        <util:BindingProxy x:Key="proxy" Data="{Binding}"/>
                        <util:NullableValueConverter x:Key="NullableValueConverter"/>
                    </DataGrid.Resources>
                    <DataGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Edit Person" Command="{Binding EditCommand}"/>
                            <MenuItem Header="Delete Vehicle Entry" Command="{Binding DeleteCommand}"/>
                            <Separator/>
                            <MenuItem Header="Close entry" ToolTip="Fills out time with current time" Command="{Binding CloseOutCommand}"/>
                        </ContextMenu>
                    </DataGrid.ContextMenu>
                    <DataGrid.Columns>
                        <DataGridTextColumn MaxWidth="35" Header="Pass" Binding="{Binding TagNum, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                                  CellStyle="{StaticResource PassCellStyle}"
                                                  />
                        <DataGridTextColumn MaxWidth="95" Header="Last" Binding="{Binding LastName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn MaxWidth="80" Header="First" Binding="{Binding FirstName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn MaxWidth="100" Header="Company" Binding="{Binding Company, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <!--<DataGridTemplateColumn Header="Edit" CellTemplate="{StaticResource EditLinkTemplate}" />-->
                        <DataGridTemplateColumn MinWidth="40" MaxWidth="60" Header="LicNum">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock  Text="{Binding LicNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsLicNumEmpty}" Value="True">
                                                        <Setter Property="TextBlock.Foreground" Value="#FF0000" />
                                                        <Setter Property="Background" Value="#DB3535" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <ComboBox IsEditable="False" 
                                              IsReadOnly="False"
                                              Name="ComboBox"
                                              SelectedValue="{Binding LicNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              ItemsSource="{Binding Person.VehicleList}" 
                                              SelectedValuePath="LicNum"
                                              />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn SortMemberPath="InTime" Header="In">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding InTimeString, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}\{0:HH:mm\}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <xctk:DateTimePicker Value="{Binding InTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        Format="Custom"
                                                        FormatString="HH:mm"
                                                        />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="Out" SortMemberPath="OutTime">
                            <DataGridTemplateColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasNoOutTime}" Value="True">
                                            <Setter Property="TextBlock.Foreground" Value="{StaticResource OutTimeBrush}"  />
                                            <Setter Property="Background" Value="{StaticResource OutTimeBrush}" />
                                            <Setter Property="BorderBrush" Value="#BB000088" />
                                            <Setter Property="BorderThickness" Value="1" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTemplateColumn.CellStyle>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding OutTimeString, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}\{0:HH:mm\}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                            <DataGridTemplateColumn.CellEditingTemplate>
                                <DataTemplate>
                                    <xctk:DateTimePicker
                                                             Value="{Binding OutTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                             Format="Custom"
                                                             FormatString="HH:mm"
                                                             />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellEditingTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn MinWidth="45" Header="Hrs In" Binding="{Binding HoursIn, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </DataGrid.Columns>
                    <DataGrid.LayoutTransform>
                        <ScaleTransform ScaleX="{Binding Path=Value, ElementName=SliderZoom}" ScaleY="{Binding Path=Value, ElementName=SliderZoom}"/>
                    </DataGrid.LayoutTransform>
                </DataGrid>
            </DockPanel>
        </DockPanel>
    </Grid>
</UserControl>